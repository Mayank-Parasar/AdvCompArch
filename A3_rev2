/***********************************************************************
 * File         : pipeline.cpp
 * Author       : Soham J. Desai 
 * Date         : 14th January 2014
 * Description  : Superscalar Pipeline for Lab2 ECE 6100
 **********************************************************************/

#include "pipeline.h"
#include <cstdlib>

extern int32_t PIPE_WIDTH;
extern int32_t ENABLE_MEM_FWD;
extern int32_t ENABLE_EXE_FWD;
extern int32_t BPRED_POLICY;

struct Dependency{
    bool ex_id_scr1;
    bool ex_id_scr2;
    bool ma_id_scr1;
    bool ma_id_scr2;
    bool ex_id_cbr;
    bool ma_id_cbr;
    };

/**********************************************************************
 * Support Function: Read 1 Trace Record From File and populate Fetch Op
 **********************************************************************/

void pipe_get_fetch_op(Pipeline *p, Pipeline_Latch* fetch_op){
    uint8_t bytes_read = 0;
    bytes_read = fread(&fetch_op->tr_entry, 1, sizeof(Trace_Rec), p->tr_file);

    // check for end of trace
    if( bytes_read < sizeof(Trace_Rec)) {
      fetch_op->valid=false;
      p->halt_op_id=p->op_id_tracker;
      return;
    }

    // got an instruction ... hooray!
    fetch_op->valid=true;
    fetch_op->stall=false;
    fetch_op->is_mispred_cbr=false;
    p->op_id_tracker++;
    fetch_op->op_id=p->op_id_tracker;
    
    return; 
}


/**********************************************************************
 * Pipeline Class Member Functions 
 **********************************************************************/

Pipeline * pipe_init(FILE *tr_file_in){
    printf("\n** PIPELINE IS %d WIDE **\n\n", PIPE_WIDTH);

    // Initialize Pipeline Internals
    Pipeline *p = (Pipeline *) calloc (1, sizeof (Pipeline));

    p->tr_file = tr_file_in;
    p->halt_op_id = ((uint64_t)-1) - 3;           

    // Allocated Branch Predictor
    if(BPRED_POLICY){
      p->b_pred = new BPRED(BPRED_POLICY);
    }

    return p;
}


/**********************************************************************
 * Print the pipeline state (useful for debugging)
 **********************************************************************/

void pipe_print_state(Pipeline *p){
    std::cout << "--------------------------------------------" << std::endl;
    std::cout <<"cycle count : " << p->stat_num_cycle << " retired_instruction : " << p->stat_retired_inst << std::endl;

    uint8_t latch_type_i = 0;   // Iterates over Latch Types
    uint8_t width_i      = 0;   // Iterates over Pipeline Width
    for(latch_type_i = 0; latch_type_i < NUM_LATCH_TYPES; latch_type_i++) {
        switch(latch_type_i) {
            case 0:
                printf(" IF: ");
                break;
            case 1:
                printf(" ID: ");
                break;
            case 2:
                printf(" EX: ");
                break;
            case 3:
                printf(" MA: ");
                break;
            default:
                printf(" ---- ");
        }
    }
    printf("\n");
    for(width_i = 0; width_i < PIPE_WIDTH; width_i++) {
        for(latch_type_i = 0; latch_type_i < NUM_LATCH_TYPES; latch_type_i++) {
            if(p->pipe_latch[latch_type_i][width_i].valid == true) {
	      printf(" %6u ",(uint32_t)( p->pipe_latch[latch_type_i][width_i].op_id));
            } else {
                printf(" ------ ");
            }
        }
        printf("\n");
    }
    printf("\n");

}



/**********************************************************************
 * -----------  DO NOT MODIFY THE CODE ABOVE THIS LINE ----------------
 **********************************************************************/

/**********************************************************************
 * -----------------------DEBUG FUNCTION-------------------------------
 *  ******************************************************************/
void dbg_print (Pipeline *p) {

 printf("\n#####################( %d )####################\n", p->stat_num_cycle);
 printf("Retired Instruction: %d\n", p->stat_retired_inst);

 printf("Number of instructions in this Pipe: %d\n", PIPE_WIDTH);
 printf("Type of Instruction in this pipe:\n");

// MA STAGE

printf("=========MA_LATCH===========\n");
int ii;
for (ii=0; ii<PIPE_WIDTH; ii++) {
    printf("p->pipe_latch[MA_LATCH][%d].op_id %d\t", ii, p->pipe_latch[MA_LATCH][ii].op_id);
    if (p->pipe_latch[MA_LATCH][ii].tr_entry.op_type == OP_ALU) {
        printf ("OP_ALU\t");
        } else if (p->pipe_latch[MA_LATCH][ii].tr_entry.op_type == OP_LD) {
         printf ("OP_LD\t");
        } else if (p->pipe_latch[MA_LATCH][ii].tr_entry.op_type == OP_ST) { 
        printf ("OP_LD\t");
        } else if (p->pipe_latch[MA_LATCH][ii].tr_entry.op_type == OP_CBR) {
        printf ("OP_CBR\t");
        } else if (p->pipe_latch[MA_LATCH][ii].tr_entry.op_type == OP_OTHER) {
        printf ("OP_OTHER\t");
        } else if (p->pipe_latch[MA_LATCH][ii].tr_entry.op_type == NUM_OP_TYPE) {
        printf("NUM_OP_TYPE\t");
        } else {
        printf("Not a valid OP!!\t");
        }
    if (p->pipe_latch[MA_LATCH][ii].valid)
            printf("valid\t");
    else 
            printf("not-valid\t");
    if (p->pipe_latch[MA_LATCH][ii].stall)
        printf("stalled\n");
    else
        printf("not-stalled\n");
    }
// EX STAGE
printf("=========EX_LATCH===========\n");
for (ii=0; ii<PIPE_WIDTH; ii++) {
    printf("p->pipe_latch[EX_LATCH][%d].op_id %d\t", ii, p->pipe_latch[EX_LATCH][ii].op_id);
    if (p->pipe_latch[EX_LATCH][ii].tr_entry.op_type == OP_ALU) {
        printf ("OP_ALU\t");
        } else if (p->pipe_latch[EX_LATCH][ii].tr_entry.op_type == OP_LD) {
         printf ("OP_LD\t");
        } else if (p->pipe_latch[EX_LATCH][ii].tr_entry.op_type == OP_ST) { 
        printf ("OP_LD\t");
        } else if (p->pipe_latch[EX_LATCH][ii].tr_entry.op_type == OP_CBR) {
        printf ("OP_CBR\t");
        } else if (p->pipe_latch[EX_LATCH][ii].tr_entry.op_type == OP_OTHER) {
        printf ("OP_OTHER\t");
        } else if (p->pipe_latch[EX_LATCH][ii].tr_entry.op_type == NUM_OP_TYPE) {
        printf("NUM_OP_TYPE\t");
        } else {
        printf("Not a valid OP!!\t");
        }
        if (p->pipe_latch[EX_LATCH][ii].valid)
            printf("valid\t");
        else 
            printf("not-valid\t");
        if (p->pipe_latch[EX_LATCH][ii].stall)
            printf("stalled\n");
        else
            printf("not-stalled\n");
    }
// ID STAGE
printf("=========ID_LATCH===========\n");
for (ii=0; ii<PIPE_WIDTH; ii++) {
    printf("p->pipe_latch[ID_LATCH][%d].op_id %d\t", ii, p->pipe_latch[ID_LATCH][ii].op_id);
    if (p->pipe_latch[ID_LATCH][ii].tr_entry.op_type == OP_ALU) {
        printf ("OP_ALU\t");
        } else if (p->pipe_latch[ID_LATCH][ii].tr_entry.op_type == OP_LD) {
         printf ("OP_LD\t");
        } else if (p->pipe_latch[ID_LATCH][ii].tr_entry.op_type == OP_ST) { 
        printf ("OP_LD\t");
        } else if (p->pipe_latch[ID_LATCH][ii].tr_entry.op_type == OP_CBR) {
        printf ("OP_CBR\t");
        } else if (p->pipe_latch[ID_LATCH][ii].tr_entry.op_type == OP_OTHER) {
        printf ("OP_OTHER\t");
        } else if (p->pipe_latch[ID_LATCH][ii].tr_entry.op_type == NUM_OP_TYPE) {
        printf("NUM_OP_TYPE\t");
        } else {
        printf("Not a valid OP!!\t");
        }
    if (p->pipe_latch[ID_LATCH][ii].valid)
            printf("valid\t");
    else 
            printf("not-valid\t");
    if (p->pipe_latch[ID_LATCH][ii].stall)
        printf("stalled\n");
    else
        printf("not-stalled\n");
    }
// IF STAGE
printf("=========IF_LATCH===========\n");
for (ii=0; ii<PIPE_WIDTH; ii++) {
    printf("p->pipe_latch[IF_LATCH][%d].op_id %d \t", ii, p->pipe_latch[IF_LATCH][ii].op_id);
    if (p->pipe_latch[IF_LATCH][ii].tr_entry.op_type == OP_ALU) {
        printf ("OP_ALU\t");
        } else if (p->pipe_latch[IF_LATCH][ii].tr_entry.op_type == OP_LD) {
         printf ("OP_LD\t");
        } else if (p->pipe_latch[IF_LATCH][ii].tr_entry.op_type == OP_ST) { 
        printf ("OP_LD\t");
        } else if (p->pipe_latch[IF_LATCH][ii].tr_entry.op_type == OP_CBR) {
        printf ("OP_CBR\t");
        } else if (p->pipe_latch[IF_LATCH][ii].tr_entry.op_type == OP_OTHER) {
        printf ("OP_OTHER\t");
        } else if (p->pipe_latch[IF_LATCH][ii].tr_entry.op_type == NUM_OP_TYPE) {
        printf("NUM_OP_TYPE\t");
        } else {
        printf("Not a valid OP!!\t");
        }
    if (p->pipe_latch[IF_LATCH][ii].valid)
            printf("valid\t");
    else 
            printf("not-valid\t");
    if (p->pipe_latch[IF_LATCH][ii].stall)
        printf("stalled\n");
    else
        printf("not-stalled\n");
    }
printf("###################################################\n");
}
/**********************************************************************
 * Pipeline Main Function: Every cycle, cycle the stage 
 **********************************************************************/
 

void pipe_cycle(Pipeline *p)
{
    p->stat_num_cycle++;
    pipe_cycle_WB(p);
    pipe_cycle_MA(p);
    pipe_cycle_EX(p);
    pipe_cycle_ID(p);
    pipe_cycle_IF(p);
    dbg_print(p);
	    
}
/**********************************************************************
 * -------------------------PIPE_LINE FUNCTION-------------------------
 *  ******************************************************************/

void pipe_cycle_WB(Pipeline *p){
  int ii;
    for(ii=0; ii<PIPE_WIDTH; ii++){
        if(p->pipe_latch[MA_LATCH][ii].op_id >= p->halt_op_id){
 	        p->halt=true; 
        }else if(p->pipe_latch[MA_LATCH][ii].valid){
            p->stat_retired_inst++;
            }
        }
    } 

//--------------------------------------------------------------------//
  
void pipe_cycle_MA(Pipeline *p){
  int ii;
  for(ii=0; ii<PIPE_WIDTH; ii++){
    p->pipe_latch[MA_LATCH][ii]=p->pipe_latch[EX_LATCH][ii];
  }
}

//--------------------------------------------------------------------//

void pipe_cycle_EX(Pipeline *p){
  int ii;
  for(ii=0; ii<PIPE_WIDTH; ii++){
    p->pipe_latch[EX_LATCH][ii]=p->pipe_latch[ID_LATCH][ii];
  }
}

//--------------------------------------------------------------------//

void pipe_cycle_ID(Pipeline *p){
int ii,k;
bool tmp_vld;

struct Dependency dep[2][2] = {{false, false}, {false, false}};

Pipeline_Latch tmp_ID_LATCH;
  for(ii=0; ii<PIPE_WIDTH; ii++){
   if (!(p->pipe_latch[IF_LATCH][ii].stall)) {
        p->pipe_latch[ID_LATCH][ii]=p->pipe_latch[IF_LATCH][ii];
    }
}
   
if (PIPE_WIDTH == 2) {// ALways maintain order
    if (p->pipe_latch[ID_LATCH][0].op_id > p->pipe_latch[ID_LATCH][1].op_id) {
       tmp_ID_LATCH =  p->pipe_latch[ID_LATCH][0];
       p->pipe_latch[ID_LATCH][0] =  p->pipe_latch[ID_LATCH][1];
       p->pipe_latch[ID_LATCH][1] = tmp_ID_LATCH;
        }
    }

  for(ii=0; ii<PIPE_WIDTH; ii++){ 
    for(k=0; k<PIPE_WIDTH; k++) { // for each instruction in ID_LATCH it will compare
                                    // all EX; MEM and CBR dependencies   
          if((k>0) && (p->pipe_latch[ID_LATCH][ii].stall)) {
                break;
            } 
                         // EX-ID dependency                                         
                          // SRC1 
            if ((p->pipe_latch[EX_LATCH][k].valid) &&
                ((p->pipe_latch[EX_LATCH][k].tr_entry.dest_needed) && 
                   (p->pipe_latch[EX_LATCH][k].tr_entry.dest ==          
                    p->pipe_latch[ID_LATCH][ii].tr_entry.src1_reg) &&
                    (p->pipe_latch[ID_LATCH][ii].tr_entry.src1_needed))) {
                                p->pipe_latch[ID_LATCH][ii].stall = true;
                                p->pipe_latch[ID_LATCH][ii].valid = false; 
                                dep[ii][k].ex_id_scr1 = true;   
                                printf("[%d][%d]EX-ID-SRC1-Dependency[Line: %d]\n", k, ii, __LINE__);    
                        // EX-ID dependency
                        // SRC2                
            } else if((p->pipe_latch[EX_LATCH][k].valid) &&
                    ((p->pipe_latch[EX_LATCH][k].tr_entry.dest_needed) &&
                    (p->pipe_latch[EX_LATCH][k].tr_entry.dest ==          
                    p->pipe_latch[ID_LATCH][ii].tr_entry.src2_reg) &&
                    (p->pipe_latch[ID_LATCH][ii].tr_entry.src2_needed))) {
                        p->pipe_latch[ID_LATCH][ii].stall = true;
                        p->pipe_latch[ID_LATCH][ii].valid = false;
                        dep[ii][k].ex_id_scr2 = true;
                        printf("[%d][%d]EX-ID-SRC2-Dependency[Line: %d]\n", k, ii, __LINE__);    
                        // MA-ID dependency
                        // SRC1
            } else if ((p->pipe_latch[MA_LATCH][k].valid) &&
                        ((p->pipe_latch[MA_LATCH][k].tr_entry.dest_needed) &&
                        (p->pipe_latch[MA_LATCH][k].tr_entry.dest ==
                        p->pipe_latch[ID_LATCH][ii].tr_entry.src1_reg) &&
                    (p->pipe_latch[ID_LATCH][ii].tr_entry.src1_needed))) {
                        p->pipe_latch[ID_LATCH][ii].stall = true;
                        p->pipe_latch[ID_LATCH][ii].valid = false;
                        dep[ii][k].ma_id_scr1 = true;
                        printf("[%d][%d]MA-ID-SRC1-Dependency[Line: %d]\n", k, ii, __LINE__);    
                        // MA-ID dependency
                        // SRC2
            } else if ((p->pipe_latch[MA_LATCH][k].valid) &&
                ((p->pipe_latch[MA_LATCH][k].tr_entry.dest_needed) && 
                (p->pipe_latch[MA_LATCH][k].tr_entry.dest == 
                p->pipe_latch[ID_LATCH][ii].tr_entry.src2_reg) &&
                (p->pipe_latch[ID_LATCH][ii].tr_entry.src2_needed))) {
                    p->pipe_latch[ID_LATCH][ii].stall = true;
                    p->pipe_latch[ID_LATCH][ii].valid = false;
                    dep[ii][k].ma_id_scr2 = true;
                    printf("[%d][%d]MA-ID-SRC2-Dependency[Line: %d]\n", k, ii, __LINE__);    
                 // Conditional Branch at EX-ID dependency
            } else if ((p->pipe_latch[EX_LATCH][k].valid) &&
                ((p->pipe_latch[ID_LATCH][ii].tr_entry.op_type == OP_CBR) &&
                 (p->pipe_latch[EX_LATCH][k].tr_entry.cc_write))) {
                p->pipe_latch[ID_LATCH][ii].stall = true;
                p->pipe_latch[ID_LATCH][ii].valid = false;
                dep[ii][k].ex_id_cbr = true;
                printf("[%d][%d]EX-ID-CBR-Dependency[Line: %d]\n", k, ii, __LINE__);   
                // Conditional Branch at MA-ID dependency
                } else if ((p->pipe_latch[MA_LATCH][k].valid) && 
                    ((p->pipe_latch[ID_LATCH][ii].tr_entry.op_type == OP_CBR) &&
                    (p->pipe_latch[MA_LATCH][k].tr_entry.cc_write))) {
                    p->pipe_latch[ID_LATCH][ii].stall = true;
                    p->pipe_latch[ID_LATCH][ii].valid = false;
                    dep[ii][k].ma_id_cbr = true;
                    printf("[%d][%d]MA-ID-CBR-Dependency[Line: %d]\n", k, ii, __LINE__);    
                } else {
                        p->pipe_latch[ID_LATCH][ii].stall = false;
                        p->pipe_latch[ID_LATCH][ii].valid = true;   
                        printf("[%d][%d] No-Dependency[Line: %d]\n", k, ii, __LINE__);    
                }
            }
        }
        // print the 'stall' and 'valid' due to inter-dependency here:
      printf("[0].stall(inter-dependency): %d \t [0].valid(inter-dependency): %d\n",p->pipe_latch[ID_LATCH][0].stall, p->pipe_latch[ID_LATCH][0].valid); 
      printf("[1].stall(inter-dependency): %d \t [1].valid(inter-dependency): %d\n",p->pipe_latch[ID_LATCH][1].stall, p->pipe_latch[ID_LATCH][1].valid); 
        // Intra-dependency you don't want to do it in loop.
        // done in the end when all inter-dependencies calculated
        if (PIPE_WIDTH == 2) {
//                printf("Control coming here [Line: %d]\n", __LINE__);
            if (!(p->pipe_latch[ID_LATCH][0].stall) && !(p->pipe_latch[ID_LATCH][1].stall)) {
                    // check:[0].dest required by [1].src(1&2)

                if  (((p->pipe_latch[ID_LATCH][0].tr_entry.dest_needed) && 
                    (p->pipe_latch[ID_LATCH][0].tr_entry.dest == 
                    p->pipe_latch[ID_LATCH][1].tr_entry.src2_reg) &&
                    (p->pipe_latch[ID_LATCH][1].tr_entry.src2_needed))) {
                        p->pipe_latch[ID_LATCH][1].stall = true;
                        p->pipe_latch[ID_LATCH][1].valid = false;    
                                printf("ID-ID-SRC1-Dependency\n");    
                    } else if (((p->pipe_latch[ID_LATCH][0].tr_entry.dest_needed) && 
                    (p->pipe_latch[ID_LATCH][0].tr_entry.dest == 
                    p->pipe_latch[ID_LATCH][1].tr_entry.src1_reg) &&
                    (p->pipe_latch[ID_LATCH][1].tr_entry.src1_needed))) {
                        p->pipe_latch[ID_LATCH][1].stall = true;
                        p->pipe_latch[ID_LATCH][1].valid = false;    
                                printf("ID-ID-SRC1-Dependency\n");    
                     //TODO:  insert CBR dependency here
                    } else if ((p->pipe_latch[ID_LATCH][0].valid) &&
                        ((p->pipe_latch[ID_LATCH][1].tr_entry.op_type == OP_CBR) &&
                        (p->pipe_latch[ID_LATCH][0].tr_entry.cc_write))) {
                        // assert(0); // knob to check the conditional dependecy on forst inst in instruction trc
                        printf("ID-ID-CBR-Dependency\n");
                        p->pipe_latch[ID_LATCH][1].stall = true;
                        p->pipe_latch[ID_LATCH][1].valid = false;   
                    }

                } else if ((p->pipe_latch[ID_LATCH][0].stall) && !(p->pipe_latch[ID_LATCH][1].stall)) {
                    p->pipe_latch[ID_LATCH][1].stall = true;
                    p->pipe_latch[ID_LATCH][1].valid = false;
//                printf("Control coming here [Line: %d]\n", __LINE__);
                }
        }
        printf("W/O forwding: p->pipe_latch[ID_LATCH][0].stall: %d\n",p->pipe_latch[ID_LATCH][0].stall); 
        printf("W/O forwding: p->pipe_latch[ID_LATCH][1].stall: %d\n",p->pipe_latch[ID_LATCH][1].stall);
    if(ENABLE_MEM_FWD){

        // TODO: ID-MA depedency
        // ID[0]-[1]---MA[0]-[1] scr1-scr2 dependency
    for (ii=0; ii<PIPE_WIDTH; ii++) { // For ID
        for (k=0; k<PIPE_WIDTH; k++) { // For MA
            if ((p->pipe_latch[ID_LATCH][ii].stall) &&
            ((dep[ii][k].ma_id_scr1) || (dep[ii][k].ma_id_scr2))) {
                p->pipe_latch[ID_LATCH][ii].stall = false;
                p->pipe_latch[ID_LATCH][ii].valid = true;
            }
        }
    }
    // ID-MA-CBR dependency
    for (ii=0; ii<PIPE_WIDTH; ii++) { // For ID
        for (k=0; k<PIPE_WIDTH; k++) { // For MA
            if ((p->pipe_latch[ID_LATCH][ii].stall) &&
            (dep[ii][k].ma_id_cbr)) {
               // assert(0);
                printf("[LINE: %d]p->pipe_latch[ID_LATCH][%d].stall: %d \n", __LINE__, ii, p->pipe_latch[ID_LATCH][ii].stall);
                p->pipe_latch[ID_LATCH][ii].stall = false;
                p->pipe_latch[ID_LATCH][ii].valid = true;
            }
        }
    }
        // the stub-code
    if ((p->pipe_latch[ID_LATCH][0].stall) && !(p->pipe_latch[ID_LATCH][1].stall)) {
                    p->pipe_latch[ID_LATCH][1].stall = true;
                    p->pipe_latch[ID_LATCH][1].valid = false;
        }        
}

    if(ENABLE_EXE_FWD){
      // TODO: ID-EX dependency
      //  ID[0]-[1]---EX[0]-[1] scr1-sc2 dependency
    for (ii=0; ii<PIPE_WIDTH; ii++) { // For ID
        for (k=0; k<PIPE_WIDTH; k++) { // For MA
            if ((p->pipe_latch[ID_LATCH][ii].stall) &&
            ((dep[ii][k].ex_id_scr1) || (dep[ii][k].ex_id_scr2))) {
                p->pipe_latch[ID_LATCH][ii].stall = false;
                p->pipe_latch[ID_LATCH][ii].valid = true;
            }
        }
    }
    // ID-EX-CBR dependency
    for (ii=0; ii<PIPE_WIDTH; ii++) { // For ID
        for (k=0; k<PIPE_WIDTH; k++) { // For MA
            if ((p->pipe_latch[ID_LATCH][ii].stall) &&
            (dep[ii][k].ex_id_cbr)) {
                p->pipe_latch[ID_LATCH][ii].stall = false;
                p->pipe_latch[ID_LATCH][ii].valid = true;
            }
        }
    }
        // the stub-code
    if ((p->pipe_latch[ID_LATCH][0].stall) && !(p->pipe_latch[ID_LATCH][1].stall)) {
                    p->pipe_latch[ID_LATCH][1].stall = true;
                    p->pipe_latch[ID_LATCH][1].valid = false;
        }        
    }

        printf("W Forwding: p->pipe_latch[ID_LATCH][0].stall: %d\n",p->pipe_latch[ID_LATCH][0].stall); 
        printf("W Foewding: p->pipe_latch[ID_LATCH][1].stall: %d\n",p->pipe_latch[ID_LATCH][1].stall);

  }


//--------------------------------------------------------------------//

void pipe_cycle_IF(Pipeline *p) {
  int ii;
  Pipeline_Latch fetch_op;
  bool tr_read_success;
  for(ii=0; ii<PIPE_WIDTH; ii++){

 if (!(p->pipe_latch[IF_LATCH][ii].stall)) {
    pipe_get_fetch_op(p, &fetch_op);

    if(BPRED_POLICY){
      pipe_check_bpred(p, &fetch_op);
    }
    
    // copy the op in IF LATCH
    p->pipe_latch[IF_LATCH][ii]=fetch_op;
      }
 if  (p->pipe_latch[ID_LATCH][ii].stall) {
                p->pipe_latch[IF_LATCH][ii].stall = true;
        } else {
                p->pipe_latch[IF_LATCH][ii].stall = false;
        }
    }
        printf("p->pipe_latch[IF_LATCH][0].stall: %d\n",p->pipe_latch[IF_LATCH][0].stall); 
        printf("p->pipe_latch[IF_LATCH][1].stall: %d\n",p->pipe_latch[IF_LATCH][1].stall);
if (PIPE_WIDTH == 2) {// ALways maintain order
    if (p->pipe_latch[IF_LATCH][0].op_id > p->pipe_latch[IF_LATCH][1].op_id) {
       fetch_op =  p->pipe_latch[IF_LATCH][0];
       p->pipe_latch[IF_LATCH][0] =  p->pipe_latch[IF_LATCH][1];
       p->pipe_latch[IF_LATCH][1] = fetch_op;
        }
    }
}


//--------------------------------------------------------------------//

void pipe_check_bpred(Pipeline *p, Pipeline_Latch *fetch_op){
  // call branch predictor here, if mispred then mark in fetch_op
  // update the predictor instantly
  // stall fetch using the flag p->fetch_cbr_stall
}


//--------------------------------------------------------------------//

