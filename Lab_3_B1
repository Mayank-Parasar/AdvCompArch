/***********************************************************************
 * File         : pipeline.cpp
 * Author       : Moinuddin K. Qureshi
 * Date         : 19th February 2014
 * Description  : Out of Order Pipeline for Lab3 ECE 6100

 * Update       : Shravan Ramani, Tushar Krishna, 27th Sept, 2015
 **********************************************************************/

#include "pipeline.h"
#include <cstdlib>
#include <cstring>
using namespace std;

extern int32_t PIPE_WIDTH;
extern int32_t SCHED_POLICY;
extern int32_t LOAD_EXE_CYCLES;

/**********************************************************************
 * Support Function: Read 1 Trace Record From File and populate Fetch Inst
 **********************************************************************/

void pipe_fetch_inst(Pipeline *p, Pipe_Latch* fe_latch){
    static int halt_fetch = 0;
    uint8_t bytes_read = 0;
    Trace_Rec trace;
    if(halt_fetch != 1) {
      bytes_read = fread(&trace, 1, sizeof(Trace_Rec), p->tr_file);
      Inst_Info *fetch_inst = &(fe_latch->inst);
    // check for end of trace
    // Send out a dummy terminate op
      if( bytes_read < sizeof(Trace_Rec)) {
        p->halt_inst_num=p->inst_num_tracker;
        halt_fetch = 1;
        fe_latch->valid=true;
        fe_latch->inst.dest_reg = -1;
        fe_latch->inst.src1_reg = -1;
        fe_latch->inst.src1_reg = -1;
        fe_latch->inst.inst_num=-1;
        fe_latch->inst.op_type=4;
        return;
      }

    // got an instruction ... hooray!
      fe_latch->valid=true;
      fe_latch->stall=false;
      p->inst_num_tracker++;
      fetch_inst->inst_num=p->inst_num_tracker;
      fetch_inst->op_type=trace.op_type;

      fetch_inst->dest_reg=trace.dest_needed? trace.dest:-1;
      fetch_inst->src1_reg=trace.src1_needed? trace.src1_reg:-1;
      fetch_inst->src2_reg=trace.src2_needed? trace.src2_reg:-1;

      fetch_inst->dr_tag=-1;
      fetch_inst->src1_tag=-1;
      fetch_inst->src2_tag=-1;
      fetch_inst->src1_ready=false;
      fetch_inst->src2_ready=false;
      fetch_inst->exe_wait_cycles=0;
    } else {
      fe_latch->valid = false;
    }
    return;
}


/**********************************************************************
 * Pipeline Class Member Functions
 **********************************************************************/

Pipeline * pipe_init(FILE *tr_file_in){
    printf("\n** PIPELINE IS %d WIDE **\n\n", PIPE_WIDTH);

    // Initialize Pipeline Internals
    Pipeline *p = (Pipeline *) calloc (1, sizeof (Pipeline));

    p->pipe_RAT=RAT_init();
    p->pipe_ROB=ROB_init();
    p->pipe_EXEQ=EXEQ_init();
    p->tr_file = tr_file_in;
    p->halt_inst_num = ((uint64_t)-1) - 3;
    int ii =0;
    for(ii = 0; ii < PIPE_WIDTH; ii++) {  // Loop over No of Pipes
      p->FE_latch[ii].valid = false;
      p->ID_latch[ii].valid = false;
      p->EX_latch[ii].valid = false;
      p->SC_latch[ii].valid = false;
    }
    return p;
}


/**********************************************************************
 * Print the pipeline state (useful for debugging)
 **********************************************************************/

void pipe_print_state(Pipeline *p){
    std::cout << "--------------------------------------------" << std::endl;
    std::cout <<"cycle count : " << p->stat_num_cycle << " retired_instruction : " << p->stat_retired_inst << std::endl;
    uint8_t latch_type_i = 0;
    uint8_t width_i      = 0;
   for(latch_type_i = 0; latch_type_i < 4; latch_type_i++) {
        switch(latch_type_i) {
        case 0:
            printf(" FE: ");
            break;
        case 1:
            printf(" ID: ");
            break;
        case 2:
            printf(" SCH: ");
            break;
        case 3:
            printf(" EX: ");
            break;
        default:
            printf(" -- ");
          }
    }
   printf("\n");
   for(width_i = 0; width_i < PIPE_WIDTH; width_i++) {
       if(p->FE_latch[width_i].valid == true) {
         printf("  %d  ", (int)p->FE_latch[width_i].inst.inst_num);
       } else {
         printf(" --  ");
       }
       if(p->ID_latch[width_i].valid == true) {
         printf("  %d  ", (int)p->ID_latch[width_i].inst.inst_num);
       } else {
         printf(" --  ");
       }
       if(p->SC_latch[width_i].valid == true) {
         printf("  %d  ", (int)p->SC_latch[width_i].inst.inst_num);
       } else {
         printf(" --  ");
       }
       if(p->EX_latch[width_i].valid == true) {
         for(int ii = 0; ii < MAX_WRITEBACKS; ii++) {
            if(p->EX_latch[ii].valid)
	      printf("  %d  ", (int)p->EX_latch[ii].inst.inst_num);
         }
       } else {
         printf(" --  ");
       }
        printf("\n");
     }
     printf("\n");

     // RAT_print_state(p->pipe_RAT);
     // EXEQ_print_state(p->pipe_EXEQ);
     ROB_print_state(p->pipe_ROB);
}


/**********************************************************************
 * Pipeline Main Function: Every cycle, cycle the stage
 **********************************************************************/

void pipe_cycle(Pipeline *p)
{   //pipe_print_state(p);
    p->stat_num_cycle++;

    pipe_cycle_commit(p);
    pipe_cycle_writeback(p);
    pipe_cycle_exe(p);
    pipe_cycle_schedule(p);
    pipe_cycle_issue(p);
    pipe_cycle_decode(p);
    pipe_cycle_fetch(p);

}

//--------------------------------------------------------------------//

void pipe_cycle_fetch(Pipeline *p){
  int ii = 0;
  Pipe_Latch fetch_latch;

  for(ii=0; ii<PIPE_WIDTH; ii++) {
    if((p->FE_latch[ii].stall) || (p->FE_latch[ii].valid)) {   // Stall
        continue;

    } else {  // No Stall and Latch Empty
        pipe_fetch_inst(p, &fetch_latch);
        // copy the op in FE LATCH
        p->FE_latch[ii]=fetch_latch;
    }
  }
}

//--------------------------------------------------------------------//

void pipe_cycle_decode(Pipeline *p){
   int ii = 0;

   int jj = 0;

   static uint64_t start_inst_id = 1;

   // Loop Over ID Latch
   for(ii=0; ii<PIPE_WIDTH; ii++){
     if((p->ID_latch[ii].stall == 1) || (p->ID_latch[ii].valid)) { // Stall
       continue;
     } else {  // No Stall & there is Space in Latch
       for(jj = 0; jj < PIPE_WIDTH; jj++) { // Loop Over FE Latch
         if(p->FE_latch[jj].valid) { // See Consumer checks if it's valid before consuming
           if(p->FE_latch[jj].inst.inst_num == start_inst_id) { // In Order Inst Found <--why this CHECK
             p->ID_latch[ii]        = p->FE_latch[jj];
             p->ID_latch[ii].valid  = true;
             p->FE_latch[jj].valid  = false; // signal the value has been consumed
             start_inst_id++;
             break;
           }
         }
       }
     }
   }
}

//--------------------------------------------------------------------//

void pipe_cycle_exe(Pipeline *p){

  int ii;
  //If all operations are single cycle, simply copy SC latches to EX latches
  if(LOAD_EXE_CYCLES == 1) {
    for(ii=0; ii<PIPE_WIDTH; ii++){
      if(p->SC_latch[ii].valid) {
        p->EX_latch[ii]=p->SC_latch[ii];
        p->EX_latch[ii].valid = true;
        p->SC_latch[ii].valid = false; // It does make valid of SC_latch false
      }
      return;
    }
  }

  //---------Handling exe for multicycle operations is complex, and uses EXEQ

  // All valid entries from SC get into exeq

  for(ii = 0; ii < PIPE_WIDTH; ii++) {
    if(p->SC_latch[ii].valid) {
      EXEQ_insert(p->pipe_EXEQ, p->SC_latch[ii].inst);
      p->SC_latch[ii].valid = false;
    }
  }

  // Cycle the exeq, to reduce wait time for each inst by 1 cycle
  EXEQ_cycle(p->pipe_EXEQ);

  // Transfer all finished entries from EXEQ to EX_latch
  int index = 0;

  while(1) {
    if(EXEQ_check_done(p->pipe_EXEQ)) {
      p->EX_latch[index].valid = true;
      p->EX_latch[index].stall = false;
      p->EX_latch[index].inst  = EXEQ_remove(p->pipe_EXEQ);
      index++;
    } else { // No More Entry in EXEQ
      break;
    }
  }
}



/**********************************************************************
 * -----------  DO NOT MODIFY THE CODE ABOVE THIS LINE ----------------
 **********************************************************************/

void pipe_cycle_issue(Pipeline *p) {

  // insert new instruction(s) into ROB (rename)
  // every cycle up to PIPEWIDTH instructions issued

  // TODO: Find space in ROB and transfer instruction (valid = 1, exec = 0, ready = 0)
  // TODO: If src1/src2 is not remapped, set src1ready/src2ready
  // TODO: If src1/src is remapped, set src1tag/src2tag from RAT. Set src1ready/src2ready based on ready bit from ROB entries.
  // TODO: Set dr_tag
  for(int ii=0; ii<PIPE_WIDTH; ii++){
    if (ROB_check_space(p->pipe_ROB)) { // If true; ROB has space
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
        if (p->ID_latch[ii].valid)  {       // there is a valid instruction at ID_Latch
                                            // if not valid then there is nothing to put in ROB
                                            // we always put 'valid' instruciton on ROB
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;

          int local_tail; // This contain the entry index in ROB where the new entry has been added
          // Transfer the instruction in ROB; Instruction inserted at the tail
          // and 'tail' incremented
          local_tail = ROB_insert(p->pipe_ROB, p->ID_latch[ii].inst);
          // cout << "local_tail: " << local_tail << endl;
          // cout << "p->pipe_ROB->tail_ptr: " << p->pipe_ROB->tail_ptr << endl;
          // cout << "p->pipe_ROB->head_ptr: " << p->pipe_ROB->head_ptr << endl;
          // Mark valid = 1; exec = 0; ready = 0
          // in the ROB to the instruction that just got added
          p->pipe_ROB->ROB_Entries[local_tail].valid = 1;
          p->pipe_ROB->ROB_Entries[local_tail].exec = 0;
          p->pipe_ROB->ROB_Entries[local_tail].ready = 0;
          // get the prf corresponding to the arf sources to the new instruction added at the tail
          p->pipe_ROB->ROB_Entries[local_tail].inst.src1_tag = 
          RAT_get_remap(p->pipe_RAT, p->pipe_ROB->ROB_Entries[local_tail].inst.src1_reg); 
          p->pipe_ROB->ROB_Entries[local_tail].inst.src2_tag = 
          RAT_get_remap(p->pipe_RAT, p->pipe_ROB->ROB_Entries[local_tail].inst.src2_reg); 
          // if scr1/scr2 is not remapped, set src1ready/src2ready
          if (p->pipe_ROB->ROB_Entries[local_tail].inst.src1_tag == -1) {
            p->pipe_ROB->ROB_Entries[local_tail].inst.src1_ready = true;
          } else {
            // CHECK: If the sr1_tag != -1, then 'src1_tag' contain the prf_id of the destination register
            // go to that ROB entry using 'ROB_check_ready' and see if that entry is ready
            if (ROB_check_ready(p->pipe_ROB, p->pipe_ROB->ROB_Entries[local_tail].inst.src1_tag)) {
              p->pipe_ROB->ROB_Entries[local_tail].inst.src1_ready = true;
            } else {
              p->pipe_ROB->ROB_Entries[local_tail].inst.src1_ready = false;
            }
          }
          if (p->pipe_ROB->ROB_Entries[local_tail].inst.src2_tag == -1) {
            p->pipe_ROB->ROB_Entries[local_tail].inst.src2_ready = true;
          } else {
            // CHECK: If the sr2_tag != -1, then 'src2_tag' contain the prf_id of the destination register
            // go to that ROB entry using 'ROB_check_ready' and see if that entry is ready
            if (ROB_check_ready(p->pipe_ROB, p->pipe_ROB->ROB_Entries[local_tail].inst.src2_tag)) {
              p->pipe_ROB->ROB_Entries[local_tail].inst.src2_ready = true;
            } else {
              p->pipe_ROB->ROB_Entries[local_tail].inst.src2_ready = false;
            }
          }
          // Set the prf for the destination register
          // CHECK: do set_remap only when destination register is not '-1'
          if (p->pipe_ROB->ROB_Entries[local_tail].inst.dest_reg > -1) {
            RAT_set_remap(p->pipe_RAT, p->pipe_ROB->ROB_Entries[local_tail].inst.dest_reg, 
              local_tail);
          }
          // set dr_tag
          p->pipe_ROB->ROB_Entries[local_tail].inst.dr_tag = local_tail;

          p->ID_latch[ii].valid = false;    // in next cycle instruction can enter 'Decode' 
          if (p->ID_latch[ii].stall) {      // if stall was true because the full size in ROB
                                            // make it false now.
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
            
            p->ID_latch[ii].stall = false;
          }
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
        }
    } else {  // there is no space left in ROB thus it should raise a stall signal
      if (p->ID_latch[ii].valid)  {
        // p->ID_latch[ii].valid = true; // keep instrn at ID_latch to be valid
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
            
        p->ID_latch[ii].stall = true; 
      }
    }
  }


}

//--------------------------------------------------------------------//

void pipe_cycle_schedule(Pipeline *p) {

  // select instruction(s) to Execute
  // every cycle up to PIPEWIDTH instructions scheduled

  // TODO: Implement two scheduling policies (SCHED_POLICY: 0 and 1)
  int head_ptr = p->pipe_ROB->head_ptr;

  if(SCHED_POLICY==0){
    // inorder scheduling
    // Find all valid entries, if oldest is stalled then stop
    // Else mark it as ready to execute and send to SC_latch
    for(int ii=0; ii<PIPE_WIDTH; ii++){

      // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
    /*
      // WRONG-LOGIC
      // before checking the oldest instruction in ROB is ready, once do the 'wake-up'
      // here as well for the instruction which are just calculated and enabled in the 
      // EX-Latch
      // CHECK: Do I need to do the wake up or check for dependency for only the current entry
      // I am going to put in SC-latch? 'wake-up' is fail-safe.

      if (p->EX_latch[ii].valid) {
        // this will wake-up all the instruction in the ROB having same src tag as that of dest
        ROB_wakeup(p->pipe_ROB, p->EX_latch[ii].inst.dr_tag);
      }

    */

      // Check if the oldest instruction in the ROB is ready (and unscheduled)
      // If yes, schedule it
      // If no, stall
      uint64_t tmp_inst_num = (1 << 64) - 1; // Seeded it with maximum entry
      // cout << "intial value of 'tmp_inst_num': " << tmp_inst_num << endl;
      Inst_Info tmp_inst; // container to contain the entry having the lowest inst_num as per our criteria
      int tmp_index = -1; // container to hold the temporary index of the lowest inst_num as per our criteria

      // finds the lowest (oldest-instn) inst_num
      for (int kk = 0; kk < MAX_ROB_ENTRIES; kk++) {
        if (p->pipe_ROB->ROB_Entries[kk].valid && (p->pipe_ROB->ROB_Entries[kk].ready == false) &&
          (p->pipe_ROB->ROB_Entries[kk].exec == false)) {
          // find the lowest 'insn_num' among all the 'valid' entries which are not 'ready' to be committed 
          // and sould have 'exec' as false in ROB; now after getting such entry(instruction) from ROB, we find
          // that it's src operands are not ready, then 'stall' (put an valid = 0 in SC-latch)
          if (p->pipe_ROB->ROB_Entries[kk].inst.inst_num < tmp_inst_num) {
            tmp_inst_num = p->pipe_ROB->ROB_Entries[kk].inst.inst_num;
            tmp_inst = p->pipe_ROB->ROB_Entries[kk].inst;
            tmp_index = kk;
          }
        }
      }
      // cout << "tmp_inst_num: " << tmp_inst_num << endl;
      // cout << "tmp_index: " << tmp_index << endl;
      // No entry found.. which is 'valid' and 'exec is false' and 'not ready' to be committed
      // Stall in this case also
      if (tmp_inst_num == ((2 << 64) - 1)) {
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
        p->SC_latch[ii].valid = false;
        p->SC_latch[ii].stall = true;
        goto skip;
      }
      // If got an entry.. See if it's all sources are ready and it's ready to be executed?...
      ROB_mark_exec(p->pipe_ROB, tmp_inst);
      // Printing the result here as well
      // cout << "[ "<<__LINE__<<" ]p->pipe_ROB->ROB_Entries[tmp_index].exec: " << p->pipe_ROB->ROB_Entries[tmp_index].exec << endl;
      // ready to execute
      if (p->pipe_ROB->ROB_Entries[tmp_index].exec) {
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
        // we got the entry to be put in the SC-Latch
        p->SC_latch[ii].inst = p->pipe_ROB->ROB_Entries[tmp_index].inst;
        p->SC_latch[ii].valid = true;
        p->SC_latch[ii].stall = false;
      } else {
        // Sources are not ready for the selected entry.. so stall
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
        p->SC_latch[ii].stall = true;
        p->SC_latch[ii].valid = false;
        goto skip;
      }

      skip:
      return;

      /*
        static uint64_t index = head_ptr;
        while (p->pipe_ROB->ROB_Entries[index].valid) {
          if (p->pipe_ROB->ROB_Entries[index].exec == false)
          ROB_mark_exec(p->pipe_ROB, p->pipe_ROB->ROB_Entries[index].inst);
          if (p->pipe_ROB->ROB_Entries[index].exec == true)
            break;
          else {
                if (++index == MAX_ROB_ENTRIES) {
                  index = 0;
                }
          }

        }

          cout<<"Control coming here" << __LINE__ << endl;
          ROB_mark_exec(p->pipe_ROB, p->pipe_ROB->ROB_Entries[index].inst);
          // Above function would have marked the entry ready to execute (if it was ready)
          // Else mark it as ready to execute and send to SC_latch
          cout << "p->pipe_ROB->ROB_Entries[head_ptr].exec: " << p->pipe_ROB->ROB_Entries[head_ptr].exec << endl;
          cout << "p->pipe_ROB->head_ptr" << p->pipe_ROB->head_ptr << endl;
          if (p->pipe_ROB->ROB_Entries[index].exec) { // If exec is true
            cout<<"Control coming here" << __LINE__ << endl;
            p->SC_latch[ii].inst = p->pipe_ROB->ROB_Entries[head_ptr].inst;
            p->SC_latch[ii].valid = true;
            p->SC_latch[ii].stall = false;
          } else { // if exec is false
            cout<<"Control coming here" << __LINE__ << endl;
            // There is nothing to schedule here, => STALL: CHECK
            p->SC_latch[ii].stall = true;
          }
        //}
      }
      */
    }
  }
  if(SCHED_POLICY==1){
    // out of order scheduling
    // Find valid + src1ready + src2ready + !exec entries in ROB
    // Mark ROB entry as ready to execute  and transfer instruction to SC_latch


  }

}


//--------------------------------------------------------------------//

void pipe_cycle_writeback(Pipeline *p){

  // TODO: Go through all instructions out of EXE latch
  // TODO: Writeback to ROB (using wakeup function)
  // TODO: Update the ROB, mark ready, and update Inst Info in ROB
  // int head_ptr = p->pipe_ROB->head_ptr;

// Tushar: there can be more than 'PIPEWIDTH' number of instruction commiting at a time: CHECK
  for(int ii=0; ii<PIPE_WIDTH; ii++){

       // Once you have consumed the value from the Latch, put valid as false
       // so that same value won't get consumed again and again
    if (p->EX_latch[ii].valid) {

      // Make the 'dr_tag' entry in the ROB as 'ready' to commit
      p->pipe_ROB->ROB_Entries[p->EX_latch[ii].inst.dr_tag].ready = true;


      // this will wake-up all the instruction in the ROB having same src tag as that of dest
      ROB_wakeup(p->pipe_ROB, p->EX_latch[ii].inst.dr_tag);

      // for all the valid instruction in ROB which are ready.. put 'exec' 0.
      for (int kk = 0; kk < MAX_ROB_ENTRIES; kk ++) {
        if (p->pipe_ROB->ROB_Entries[kk].valid && p->pipe_ROB->ROB_Entries[kk].ready) {
          p->pipe_ROB->ROB_Entries[kk].exec = 0;
        }
      }

      // Update 'inst_info' in ROB
      // CHECK what else needed to be updated here..
      p->EX_latch[ii].valid = false;    // in next cycle instruction can enter execute
    }
  }
}


//--------------------------------------------------------------------//


void pipe_cycle_commit(Pipeline *p) {
  int ii = 0;

  // TODO: check the head of the ROB. If ready commit (update stats)
  // TODO: Deallocate entry from ROB
  // TODO: Update RAT after checking if the mapping is still relevant

  Inst_Info tmp;
  tmp.inst_num = -1;
  int prf_id_rat;
  int index_rob = p->pipe_ROB->head_ptr;
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
  if (ROB_check_head(p->pipe_ROB)) { // checks if 'head_ptr' is ready to commit
    // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;

    // Deallocate the entry from the ROB
    tmp = ROB_remove_head(p->pipe_ROB); // Commits the instruction (valid = 0)

    //  Put ready bit off on commit
    p->pipe_ROB->ROB_Entries[index_rob].ready = false; // (ready = 0)

    // When resetting RAT based on 'ARF_ID'; Please remove only when 'PRF_ID' of the committed
    // Instruction is same as 'PRF_ID' of the RAT, you are trying to remove.. otherwise don't
    // remove/reset the RAT entry
    prf_id_rat = RAT_get_remap(p->pipe_RAT, tmp.dest_reg); // 'prf_id_rat' taken from RAT

    assert(index_rob == p->pipe_ROB->ROB_Entries[index_rob].inst.dr_tag);

    if (index_rob == prf_id_rat) { // Only if mapping is still valid
      RAT_reset_entry(p->pipe_RAT, tmp.dest_reg); // Update the stats
    }

    // here we are checking the inst at 'FE_latch' and raising the halt
    // signal 'high' on that instruction-cycle (which is leading to other
    // instructions in the pipeline not getting completed.)
    if(p->EX_latch[ii].inst.inst_num >= p->halt_inst_num){
      p->stat_retired_inst++; //CHECK: we still count the instruction
      p->halt=true;
    }else{
             // cout << "Control coming here" << __LINE__ << ":" << __func__ << endl;
      p->stat_retired_inst++;
    }

  } else {
    // what to do if there is nothing to commit?
    // CHECK
  } 
}



  // DUMMY CODE (for compiling, and ensuring simulation terminates!)
/*
  for(ii=0; ii<PIPE_WIDTH; ii++){
    if(p->FE_latch[ii].valid){
      if(p->FE_latch[ii].inst.inst_num >= p->halt_inst_num){
        p->halt=true;
      }else{
      	p->stat_retired_inst++;
      	p->FE_latch[ii].valid=false;
      }
    }
  }
 */ 

//--------------------------------------------------------------------//




